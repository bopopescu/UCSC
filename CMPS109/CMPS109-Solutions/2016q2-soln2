$Id: 2016q2-soln2,v 1.1 2016-05-12 15:59:21-07 - - $
Answers to CMPS-109 2016q1-soln2, page 1

_________________________________________________________________
Question 1. [2]

foo();
foo (const foo&);
foo (foo&&);
~foo();
foo& operator= (const foo&);
foo& operator= (foo&&);

_________________________________________________________________
Question 2. [1]

for (auto p = t.begin(); p != t.end(); ++p) foo (*p);

_________________________________________________________________
Question 3. [1]

inline bool operator<= (const foo& a, const foo& b) {
   return not (b < a);
}

_________________________________________________________________
Question 4. [3]

template <typename initor, typename outitor>
void copy (initor begin, initor end, outitor out) {
   while (begin != end) *out++ = *begin++;
}

_________________________________________________________________
Question 5. [1]

~zstring() { delete[] data_; }

_________________________________________________________________
Question 6. [2]

template <typename itor, typename func>
void for_each (itor begin, itor end, func f) {
   while (begin != end) { f (*begin); ++begin; }
}


Answers to CMPS-109 2016q1-soln2, page 2
_________________________________________________________________
Question 7. [2]

template <typename mapt>
void print_map (const mapt& m) {
   for (const auto& i: m) cout << i.first << "=" << i.second << endl;
}

_________________________________________________________________
Question 8. [3]

polynomial differentiate (const polynomial& p) {
   polynomial r;
   for (size_t i = 1; i < v.size(); ++i) {
      r.push_back (v[i] * i);
   }
   return r;
}   

_________________________________________________________________
Question 9. [3]

template <typename T, typename Func>
vector<T> zipwith (const vector<T>& v1, const vector<T>& v2, Func f) {
   if (v1.size() != v2.size()) throw domain_error ("zipwith");
   vector<T> out;
   auto i1 = v1.begin();
   auto i2 = v2.begin();
   while (i1 != v1.end()) out.push_back (f (*i1++, *i2++));
   return out; 
}

_________________________________________________________________
Question 10(a). [1]

complex (double re = 0, double im = 0): real(re), imag(im) {}

_________________________________________________________________
Question 10(b). [1]

complex operator+ (complex that) {
   return { real + that.real, imag + that.imag };
}


Answers to CMPS-109 2016q1-soln2, page 3

 1.   (C) ++*p

 2.   (D) vector

 3.   (C) list

 4.   (A) operator()

 5.   (B) &s == &t

 6.   (B) foo operator++ (int);

 7.   (B) i->second

 8.   (A) void foo (bar&&);

 9.   (C) 2

10.   (B) X11

11.   (A) Prints:  nan

12.   (C) hash table


