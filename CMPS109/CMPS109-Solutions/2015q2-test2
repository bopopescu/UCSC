$Id: 2015q2-test2,v 1.1 2015-05-18 20:03:26-07 - - $
Answers to 2015q1-test2, page 1
________________________________________________________________________
Question 1. [1]
const GLubyte RED[]   = {0xFF, 0x00, 0x00};
const GLubyte GREEN[] = {0x00, 0xFF, 0x00};
const GLubyte BLUE[]  = {0x00, 0x00, 0xFF};
const GLubyte CYAN[]  = {0x00, 0xFF, 0xFF};  |
________________________________________________________________________
Question 2(a). [1]
bool polynomial::operator== (const polynomial& that) const {
   return v == that.v;
}
________________________________________________________________________
Question 2(b). [3] // There are several other possible implementations.
polynomial& polynomial::operator+= (const polynomial& that) {
   if (v.size() >= that.v.size()) {
      for (size_t i = 0; i < that.v.size(); ++i) v[i] += that.v[i];
   }else {
      for (size_t i = 0; i < v.size(); ++i) v[i] += that.v[i];
      for (size_t i = v.size(); i < that.v.size(); ++i)
            v.push_back (that.v[i]);
   }
   return *this;
}
________________________________________________________________________
Question 2(c). [1]
polynomial operator+ (const polynomial& left, const polynomial& right) {
   polynomial result = left;
   return result += right;
}
________________________________________________________________________
Question 2(d). [4] // There are several other possible implementations.
ostream& operator<< (ostream& out, const polynomial& poly) {
   bool zero = true;
   bool plus = false;
   for (ssize_t i = poly.v.size() - 1; i >= 0; --i) {
      if (poly.v[i] == 0) continue;
      zero = false;
      if (plus) out << " + ";
      plus = true;
      out << poly.v[i];
      if (i > 0) out << " x";
      if (i > 1) out << i;
   }
   if (zero) cout << "0";
   return out;
}

Answers to 2015q1-test2, page 2
________________________________________________________________________
Question 3 [2]
template <class T> inline bool operator!= (const T& x, const T& y) {
   return not (x == y);
}
template <class T> inline bool operator>  (const T& x, const T& y) {
   return y < x;
}
template <class T> inline bool operator<= (const T& x, const T& y) {
   return not (y < x);
}
template <class T> inline bool operator>= (const T& x, const T& y) {
   return not (x < y);
}
________________________________________________________________________
Question 4 [1]
template <typename iterator, typename funobj>
void accumulate (iterator begin, iterator end, funobj& fun) {
   for (; begin != end; ++begin) fun (*begin);
}
________________________________________________________________________
Question 5 [1]
struct adder {
   double sum = 0;
   void operator() (double d) { sum += d; }
};
________________________________________________________________________
Question 6 [2]
template <typename container, typename T>
void remove (container& c, bool(*p)(T)) {
   for (auto i = c.begin(); i != c.end();) {
      if (p(*i)) i = c.erase(i);
            else ++i;
   }
}
________________________________________________________________________
Question 7 [2]
void draw_dots() {
   glBegin (GL_POINTS);
   glVertex2f (0, 0);
   for (float x = 0; x < 2 * M_PI; x += M_PI / 6) {
      glVertex2f (sin(x), cos(x));
   }
   glEnd();
}
________________________________________________________________________
Question 8 [2]
template <typename container, typename predicate, typename action>
void apply (container& c, predicate p, action a) {
   for (auto& i: c) if (p(i)) a(i);
}

Answers to 2015q1-test2, page 3

 1.    (D) $ 2 n + 2 $

 2.    (B) auto_ptr<T>

 3.    (C) lexical_cast

 4.    (D) virtual

 5.    (C) virtual void f() = 0;

 6.    (D) destructor

 7.    (D) random_access_iterator_tag

 8.    (D) reference counting

 9.    (B) copy constructor

10.    (C) map<string,node_ptr>::mapped_type

11.    (B) $ O ( log sub 2 n ) $

12.    (A) i != c.end()

