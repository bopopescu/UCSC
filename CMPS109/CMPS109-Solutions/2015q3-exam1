$Id: 2015q3-exam1,v 1.1 2015-07-09 16:17:58-07 - - $
Answers to 2015q3-exam1, page 1
________________________________________________________________________
Question 1. [2]

double sum (const vector<double>& vec) {
   double s = 0;
   for (const auto& di = vec.cbegin(); di != vec.cend(); ++di) {
      s += *di;
   }
   return s;
}

________________________________________________________________________
Question 2. [3]

int from_string (const string& arg) {
   stringstream stream (arg);
   int result;
   if (not (stream >> result and stream.eof())) {
      throw domain_error ("int from_string (" + arg + ")");
   }
   return result;
}

________________________________________________________________________
Question 3. [1]

bool operator<= (const foo &left, const foo &right) {
   return not (right < left);
}

________________________________________________________________________
Question 4 [2]

template <typename Itor, typename Item>
Itor find (Itor begin, Itor end, const Item& item) {
   while (begin != end and *begin != item) ++begin;
   return begin;
}

________________________________________________________________________
Question 5 [2]

void print (const map<string,value>& m) {
   for (const auto& i: m) {
      cout << i->first << " = " << i->second.first << ":"
           << i->second.second << endl;
   }
}


Answers to 2015q3-exam1, page 2
________________________________________________________________________
Question 6 [2]

list<int>::iterator find_largest (const list<int>& ints) {
   auto maxi = ints.begin();
   for (auto i: ints) if (*maxi < *i) maxi = i;
   return maxi;
}
// OK to use 3-part version of for loop
// Note: if multiple "largest" elements, return itor to any of them.
________________________________________________________________________
Question 7 [2]

void (vector<int>& vec, const list<int>& lis) {
   for (auto i: lis) if (*i > 0) vec.push_back (*i);
}
// OK to use 3-part version of for loop

________________________________________________________________________
Question 8 [2]

int main (int argc, char** argv) {
   vector<string> args (&argv[1], &argv[argc]);
// Deduct 1 point if a for-loop is used.
// Deduct 1/2 point if argv[0] is used.

________________________________________________________________________
Question 9 [2]

void copy_reverse (vector<string>& input, vector<string>& output) {
   while (not input.empty()) { // or: input.size() > 0
      output.push_back (input.back());
      input.pop_back();
   }
}

________________________________________________________________________
Question 10 [2]

tree* clone_tree (tree* t) {
   if (t == nullptr) return nullptr;
   return new tree (t->value, clone_tree (t->left),
                              close_tree (t->right));
}


Answers to 2015q3-exam1, page 3
________________________________________________________________________
Question 11. [5]

ubigint ubigint::operator+ (const ubigint& that) const {
   ubigint sum;
   udigit_t carry = 0;
   for (size_t i = 0;
        i < ubig_value.size() or i < that.ubig_value.size(); ++i) {
      udigit_t d1 = i < ubig_value.size() ? ubig_value[i] : 0;
      udigit_t d2 = i < that.ubig_value.size() ? that.ubig_value[i] : 0;
      udigit_t s = d1 + d2;
      sum.ubigvalue.push_back (s % 10);
      carry = s / 10;
   }
   if (carry) sum.ubigvalue.push_back (carry);
   return sum;
}

________________________________________________________________________
Question 12(a). [3]

intvec& intvec::operator= (const intvec& that) {
   if (this != &that) {
      if (data_ != nullptr) delete[] data_;
      size_ = that.size_;
      data_ = new int[that.size_];
      for (int i = 0; i < size_; ++i) data_[i] = that.data_[i];
   }
   return *this;
}

________________________________________________________________________
Question 12(b). [2]

explicit intvec::intvec (size_t size):
         size_(size), data_(new int[size] {
   for (int i = 0; i < size; ++i) data_[i] = 0;
}


Answers to 2015q3-exam1, page 4

 1.    (B) $ O ( log n ) $

 2.    (D) using namespace std;

 3.    (D) valgrind

 4.    (C) size_t

 5.    (A) friend: int i;

 6.    (D) this

 7.    (D) operator<<

 8.    (C) catch (runtime_error& error)

 9.    (C) foo (const foo&);

10.    (B) a = *p; ++p;

11.    (D) vector is template class containing objects of class string.

12.    (C) directed cyclic graph


Answers to 2015q3-exam1, page 5

 1.    (A) $ O ( 1 ) $

 2.    (C) hash table

 3.    (A) void f (const string&);

 4.    (B) string* p;

 5.    (D) cout << endl;

 6.    (D) nullptr

 7.    (B) 1

 8.    (D) ||

 9.    (B) continue

10.    (A) i != c.end()

11.    (B) foo() = default;

12.    (D) ~foo();

