$Id: 2015q3-exam3,v 1.4 2015-08-13 18:43:10-07 - - $
Answers to 2015q3-exam3, page 1
________________________________________________________________________
Question 1. [2]

C++98:                         | C++11:
foo();                         | foo (foo&&);
foo (const foo&);              | foo& operator= (foo&&);
foo& operator= (const foo&);   |
~foo();                        |

________________________________________________________________________
Question 2. [2]

|void foo (int);                | void bar (double);            |
|void foo (double);             | bar (3);                      |
* ad hoc * overloading          * ad hoc * conversion

|class qux: public baz {        | template <typename T>         |
|};                             | T sum (T*);                   |
* universal * inclusion         * universal * parametric

________________________________________________________________________
Question 3. [2]

template <typename Itor, typename Fn>
Itor find (Itor begin, Itor end, Fn fn) {
   while (; begin != end; ++begin) if (fn (*begin)) break;
   return begin;
}

________________________________________________________________________
Question 4. [2]

double innerprod (const vector<double>& v1, const vector<double>& v2) {
   if (v1.size() != v2.size()) throw domain_error ("innerprod");
   double ip = 0;
   for (size_t i = 0; i < v1.size(); ++i) ip += v1[i] * v2[i];
   return ip;
}

________________________________________________________________________
Question 5. [2]

template <typename Itor>
bool monotonic (Itor begin, Itor end) {
   if (begin == end) return true;
   auto curr = begin;
   while (++begin != end) {
      if (not (*curr < *begin)) return false;
      curr = begin;
   }
   return true;
}


Answers to 2015q3-exam3, page 2
________________________________________________________________________
Question 6(a). [3]

template <typename T>
class fixvec {
   private:
      size_t size_;
      T* data_;
   public:
      class iterator;
      iterator begin() { return iterator (&data_[0]); }
      iterator end() { return iterator (&data_[size_]); }
      size_t size() const { return size_; }
      const T& operator[] (size_t i) const { return data_[i]; }
      T& operator[] (size_t i) { return data_[i]; }
};

________________________________________________________________________
Question 6(b). [4]

template <typename T>
class fixvec<T>::iterator {
   private:
      T* ptr;
   public:
      iterator (T* p): ptr(p) {}
      iterator (): ptr (nullptr) {}
      bool operator!= const (const iterator& i) { return ptr != i.ptr; }
      iterator& operator++() { ++ptr; return *this; }
      iterator operator++ (int) { auto i = *this; ++ptr; return i; }
      T& operator*() { return *ptr; }
      T* operator->() { return ptr; }
};

________________________________________________________________________
Question 7. [3]

void draw_french_flag() {
   for (size_t i = 0; i < 3; ++i) {
      glBegin (GL_POLYGON);
      glColor3ubv (colors[i]);
      glVertex2f (window.width * i / 3.0, 0);
      glVertex2f (window.width * (i + 1) / 3.0, 0);
      glVertex2f (window.width * (i + 1) / 3.0, window.height);
      glVertex2f (window.width * i / 3.0, window.height);
      glEnd();
   }
}
// May also make 3 calls on an auxiliar function, suitable
// parameterized.  Do not write complete code duplicated 3 times.


Answers to 2015q3-exam3, page 3
________________________________________________________________________
Question 8(a). [2]

struct arith {
   virtual double eval() const = 0;
   virtual void print() const = 0;
   virtual ~arith();
};

________________________________________________________________________
Question 8(b). [2]

struct number: public arith {
   double v;
   virtual double eval() const override { return v; }
   virtual void print() const override { cout << v; }
};

________________________________________________________________________
Question 8(c). [3]

struct add: public arith {
   arith* left;
   arith* right;
   virtual double eval() const override {
      return left->eval() + right->eval();
   }
   virtual void print() const override {
      cout << "("; left->print(); cout << "+";
      right->print(); cout << ")";
   }
   ~add() { delete left; delete right; }
};

________________________________________________________________________
Question 8(d). [3]

struct mul: public arith {
   arith* left;
   arith* right;
   virtual double eval() const override {
      return left->eval() * right->eval();
   }
   virtual void print() const override {
      cout << "("; left->print(); cout << "*";
      right->print(); cout << ")";
   }
   ~mul() { delete left; delete right; }
};


Answers to 2015q3-exam3, page 4

 1.    (B) dynamic_cast

 2.    (D) char d {4589};

 3.    (D) when the function is called

 4.    (B) operator()

 5.    (B) m::mapped_type

 6.    (A) -c

 7.    (C) $ left { x suchthat a <= x < b right } $

 8.    (A) 0 to 255

 9.    (D) fields in reverse declaration order, then base class.

10.    (D) static_cast

11.    (D) vector

12.    (B) void foo () const;


Answers to 2015q3-exam3, page 5

 1.    (A) abstract

 2.    (C) ostream&, const foo&

 3.    (B) 0x0020

 4.    (A) delete[] p;

 5.    (C) red, green, blue

 6.    (B) virtual void f() = 0;

 7.    (B) list

 8.    (C) hash table

 9.    (D) int a {4.8};

10.    (B) cout << **i;

11.    (D) virtual

12.    (B) goto

