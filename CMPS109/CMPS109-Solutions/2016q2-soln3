$Id: 2016q2-soln3,v 1.2 2016-06-09 16:46:09-07 - - $
Answers to CMPS-109 2016q1-soln3, page 1

_________________________________________________________________
Question 1. [2]

+-----------------------------+-----------------------------+
|void f(int);               A | class baz: private qux {  U |
|void f(string);            O | };                        I |
+-----------------------------+-----------------------------+
|template <typename T>      U | void f(double);           A |
|T sum (T*);                P | int x; f(x);              C |
+-----------------------------+-----------------------------+

_________________________________________________________________
Question 2. [2]

counter& operator++() {
   unique_lock<mutex> unique (lock);
   ++count;
   return *this;
}

_________________________________________________________________
Question 3. [1]

3 correct: 1 *   const GLubyte RED[] {255, 0, 0};
2 correct: ½ *   const GLubyte GREEN[] {0, 255, 0};
else: 0 *        const GLubyte BLUE[] {0, 0, 255};

_________________________________________________________________
Question 4. [1]

const GLubyte BLACK[] {0, 0, 0};
const GLubyte WHITE[] {255, 255, 255};
vector<const GLubyte*> colors {BLACK, WHITE};

_________________________________________________________________
Question 5. [4]

void draw_chessboard (GLfloat x0, GLfloat y0, GLfloat size) {
   GLfloat w = size / 8.0;
   for (size_t x = 0; x < 8; ++x) {
      for (size_t y = 0; y < 8; ++y) {
         glBegin (GL_POLYGON);
         glColor3ubv (colors[(x + y) % 2]);
         glVertex2f (x0 + w * x, y0 + w * y);
         glVertex2f (x0 + w * x + w, y0 + w * y);
         glVertex2f (x0 + w * x + w, y0 + w * y + w);
         glVertex2f (x0 + w * x, y0 + w * y + w);
         glEnd();
      }
   }
}


Answers to CMPS-109 2016q1-soln3, page 2
_________________________________________________________________
Question 6. [2]

template <typename itor, typename element>
itor find (itor begin, itor end, const element& elt) {
   for (; begin != end; ++begin) if (*begin == elt) break;
   return begin;
}

_________________________________________________________________
Question 7. [4]

template <typename itor, typename item>
itor binary_search (itor begin, itor end, const item& it) {
   itor endb = end;
   while (begin < endb) {
      itor mid = begin + (endb - begin) / 2;
      if (*mid < it) begin = mid + 1;
      else if (it < *mid) endb = mid;
      else return mid;
   }
   return end;
}

_________________________________________________________________
Question 8(a). [1]

bool polynomial::operator== (const polynomial& that) const {
   return v == that.v;
}

_________________________________________________________________
Question 9(b). [3]

polynomial& polynomial::operator+= (const polynomial& that) {
   if (v.size() >= that.v.size()) {
      for (size_t i = 0; i < that.v.size(); ++i) v[i] += that.v[i];
   }else {
      for (size_t i = 0; i < v.size(); ++i) v[i] += that.v[i];
      for (size_t i = v.size(); i < that.v.size(); ++i)
            v.push_back (that.v[i]);
   }
   return *this;
}


Answers to CMPS-109 2016q1-soln3, page 3
_________________________________________________________________
Question 9. [1]

polynomial operator+ (const polynomial& p, const polynomial& q) {
   polynomial result (p);
   return result += q;
}

_________________________________________________________________
Question 10. [2]

void canonicalize (ubigvalue_t& vec) {
   while (vec.size() > 0 and vec.back() == 0) vec.pop_back();
}

_________________________________________________________________
Question 11(a). [3]

class shape {
   public:
      virtual double circumference() const = 0;
      virtual double area() const = 0;
      shape (const shape&) = delete;
      shape& operator= (const shape&) = delete;
      virtual ~shape();
};

_________________________________________________________________
Question 11(b). [2]

class square: public shape {
   double width;
   public:
      explicit square (double d = 0): width(d) {}
      virtual double circumference() const override { return width*4; }
      virtual double area() const override { return width*width; }
};

_________________________________________________________________
Question 11(c). [2]

class circle: public shape {
   double radius;
   public:
      explicit square (double r = 0): radius(r) {}
      virtual double circumference() const override {
              return 2 * M_PI * radius; }
      virtual double area() const override { r
              return M_PI * radius * radius; }
};


Answers to CMPS-109 2016q1-soln3, page 4

 1.   (C) 0x78563412

 2.   (A) v.capacity()

 3.   (C) list<T>

 4.   (C) 2 pointers

 5.   (C) reinterpret_cast

 6.   (D) void foo(int*);

 7.   (D) lower left

 8.   (C) for (auto& i: c)

 9.   (C) status >> 8

10.   (C) race condition

11.   (A) deadlock

12.   (D) Simula 67


Answers to CMPS-109 2016q1-soln3, page 5

 1.   (D) this

 2.   (A) ~object()

 3.   (C) object& operator= (const object&)

 4.   (B) vector<T> is $ O ( n ) $ and list<T> is $ O ( 1 ) $

 5.   (D) fields in reverse declaration order first,
          then base class.

 6.   (C) s == t and *s != *t

 7.   (A) condition_variable

 8.   (D) listen

 9.   (A)  8

10.   (A) $ O ( 1 ) $

11.   (B) $ O ( log sub 2 n ) $

12.   (D) Bjarne Stroustrup

