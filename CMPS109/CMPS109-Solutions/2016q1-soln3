$Id: 2016q1-soln3,v 1.3 2016-03-11 17:57:35-08 - - $
Answers to CMPS-109 2016q1-soln3, page 1

_________________________________________________________________
Question 1. [3]

void draw_blue_square() {
   glBegin (GL_POLYGON);
   glColor3ub (0, 0, 255);
   glVertex2f (10, 10);
   glVertex2f (30, 10);
   glVertex2f (30, 30);
   glVertex2f (10, 30);
   glEnd();
}

_________________________________________________________________
Question 2. [7]

Assign one point for each of the sections of the question.
Comments at the ends of lines refer to the specific parts
of the exam question.

Assign either 1 or 0 to each part.
Deduct an extra 1 point if public and private are not correct.

template <typename T>
class queue { 
   private:
      struct node { T item; node* link; }; // (i)
      node* head {nullptr};                // (ii)
      node* tail {nullptr};                // (ii)
   public: 
      queue (const queue&) = delete;            // (iii)
      queue& operator= (const queue&) = delete; // (iii)
      const T& front() const;                   // (iv)
      T& front();                               // (v)
      void pop_front();                         // (vi)
      void push_back (const T&);                // (vii)
      queue();
};


Answers to CMPS-109 2016q1-soln3, page 2
_________________________________________________________________
Question 3. [2]


GLubyte BLACK[]   = {  0,  0,  0}; GLubyte BLUE[]   = {  0,  0,255};
GLubyte CYAN[]    = {  0,255,255}; GLubyte GREEN[]  = {  0,255,  0};
GLubyte MAGENTA[] = {255,  0,255}; GLubyte RED[]    = {255,  0,  0};
GLubyte WHITE[]   = {255,255,255}; GLubyte YELLOW[] = {255,255,  0};

_________________________________________________________________
Question 4. [4]

template <typename T>
bool operator== (const T& a, const T& b) {
   if (a.size() != b.size()) return false;
   auto ai = a.begin();
   auto bi = b.begin();
   for (; ai != a.end() and bi != b.end(); ++ai, ++bi) {
      if (not (*ai == *bi)) return false;
   }
   return true;
}

_________________________________________________________________
Question 5. [2]

template <typename I1, typename I2>
bool equal (I1 begin1, I1 end, I2 begin2, I2 end2) {
   while (begin1 != end1 and begin2 != end2) {
      if (not (*begin1 == *begin2)) return false;
   }
   return begin1 == end1 and begin2 == end2;
}

_________________________________________________________________
Question 6. [2]

template <typename F, typename S>
ostream& operator<< (ostream& out, const pair<F,S>& p) {
   out << "{" << p.first << "," << p.second << "}";
}

_________________________________________________________________
Question 7. [2]

template <typename F, typename S>
bool operator< (const pair<F,S>& a, const pair<F,S>& b) {
   if (a.first < b.first) return true;
   if (b.first < a.first) return false;
   return a.second < b.second;
}


Answers to CMPS-109 2016q1-soln3, page 2

_________________________________________________________________
Question 8(a). [2]
class shape {
   public:
      virtual double area() const = 0;
      virtual double circumference() const = 0;
      virtual ~shape();
};

_________________________________________________________________
Question 8(b). [2]
class circle: public shape {
   private:
      double radius {};
   public:
      circle (double r): radius(r) {}
      virtual double area() const override {
         return M_PI * radius * radius;
      }
      virtual double circumference() const override {
         return 2.0 * M_PI * radius;
      }
};

_________________________________________________________________
Question 8(c). [2]
class square: public shape {
   private:
      double length {};
   public:
      square (double n): length(n) {}
      virtual double area() const override {
         return length * length;
      }
      virtual double circumference() const override {
         return 4.0 * length;
      }
}

_________________________________________________________________
Question 9. [4]
struct array {
   size_t n; int* a;
   struct iterator {
      int* p;
      iterator (int* q): p(q){}
      bool operator!= (iterator i) { return p != i.p; }
      iterator& operator++() { ++p; return *this; }
      int& operator*() { return *p; }
   };
   iterator begin() { return a; }
   iterator end() { return &a[n]; }
};


Answers to CMPS-109 2016q1-soln3, page 4

 1.    (C) race condition

 2.    (C) mutex

 3.    (A) daemon

 4.    (C) 32

 5.    (A) at another location on the heap outside the object

 6.    (D) p is OK, but f is in error

 7.    (D) t = sizeof (int);

 8.    (D) random access

 9.    (C) listen(2)

10.    (B) exn.what()

11.    (D) virtual

12.    (A) Edsger Dijkstra


Answers to CMPS-109 2016q1-soln3, page 5

 1.    (B) forward_list

 2.    (D) random access

 3.    (B)  32

 4.    (C) 0x78563412

 5.    (C) ++*i;

 6.    (A) ++x;

 7.    (C) not a multiple of 256

 8.    (A) operator()

 9.    (C) protected

10.    (B) list

11.    (D) red-black tree

12.    (B) any member function is virtual.

