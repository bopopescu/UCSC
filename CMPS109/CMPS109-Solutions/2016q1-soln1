$Id: 2016q1-soln1,v 1.2 2016-01-28 18:30:00-08 - - $
Answers to CMPS-109 2016q1-soln1, page 1

_________________________________________________________________
Question 1. [2]

foo();
foo (const foo&);
foo (foo&&);
foo& operator= (const foo&);
foo& operator= (foo&&);
~foo();

_________________________________________________________________
Question 2. [3]

template <typename itor>
bool lexic_less (itor begin1, itor end1, itor begin2, itor end2) {
   while (begin1 != end1 and begin2 != end2) {
      if (*begin1 < *begin2) return true;
      if (*begin2 < *begin1) return false;
      ++begin1;
      ++begin2;
   }
   return begin1 == end1 and begin2 != end2;
}

_________________________________________________________________
Question 3. [2]

template <typename itor, class predicate>
itor find_if (itor begin, itor end, predicate pred) {
   while (begin != end and not pred (*begin)) ++begin;
   return begin;
}

_________________________________________________________________
Question 4. [3]

template <typename itor, typename container>
void merge (itor begin1, itor end1, itor begin2, itor end2,
            container out) {
   while (begin1 != end1 and begin2 != end2) {
      out.push_back (*begin1 < *begin2 ? *begin1++ : *begin2++);
   }
   while (begin1 != end1) out.push_back (*begin1++);
   while (begin2 != end2) out.push_back (*begin2++);
}

Answers to CMPS-109 2016q1-soln1, page 2
_________________________________________________________________
Question 5. [1]

complex (double re = 0.0, double im = 0.0): real(re), imag(im) {}

_________________________________________________________________
Question 6(a). [2]

class number: public expr {
   private:
      double num;
   public:
      number (double d = 0.0): num(d) {}
      virtual double eval() const override { return num; }
      virtual void print (ostream& out) const override { out << num; }
};

_________________________________________________________________
Question 6(b). [4]

using expr_ptr = shared_ptr<expr>;
class adder: public expr {
   private:
      expr_ptr left;
      expr_ptr right;
   public:
      adder (expr_ptr le, expr_ptr ri): left(le), right(ri) {}
      virtual double eval() const override {
         return left->eval() + right->eval();
      }
      virtual void print (ostream& out) const override {
         out << "(" << left << "," << right << ")";
      }
}

_________________________________________________________________
Question 6(c). [1]

ostream& operator<< (ostream& out, expr_ptr exp) {
   exp->print (out);
   return out;
}

_________________________________________________________________
Question 7. [2]

template <typename item_t>
ostream& operator<< (ostream& out, const vector<item_t> vec) {
   bool space = false;
   for (const auto& item: vec) {
      if (space) out << " ";
      out << item;
      space = true;
   }
   return out;
}

Answers to CMPS-109 2016q1-soln1, page 3

 1.    (A) classes derived from class foo.

 2.    (C) foo(foo&&)

 3.    (C) shared_ptr

 4.    (C) vector<T> is $ O ( 1 ) $ and list<T> is $ O ( n ) $

 5.    (B) deque

 6.    (C) unordered_map

 7.    (B) s != t and &s == &t

 8.    (B) x is private and y is public

 9.    (B) foo (const foo&) = delete;

10.    (B) i->second

11.    (C) Prints inf.

12.    (C) yes

