$Id: 2015q2-test3,v 1.1 2015-06-09 13:14:16-07 - - $
Answers to 2015q1-test3, page 1
________________________________________________________________________
Question 1. [3]

void purple_square() {
   glBegin (GL_POLYGON);
   glColor3ub (160, 32 ,240);
   glVertex2f (0, 0);
   glVertex2f (1, 0);
   glVertex2f (1, 1);
   glVertex2f (0, 1);
   glEnd();
}

________________________________________________________________________
Question 2. [3]

template <typename Itor, typename T, typename F>
T accumulate (Itor begin, Itor end, T ident, F f) {
   while (begin != end) ident = f (ident, *begin++);
   return ident;
}

________________________________________________________________________
Question 3. [4]

template <typename T>
class stack {
   private:
      vector<T> data;
   public:
      void push (const T& x) { data.push_back (x); }
      void pop() { data.pop_back(); }
      const T& top() const { return data.back(); }
      T& top() { return data.back(); }
      size_t size() { return data.size(); }
      bool empty() { return data.empty(); }
};


Answers to 2015q1-test3, page 2
________________________________________________________________________
Question 4 [1]

const GLubyte MAGENTA[] = {255, 0, 255};
const GLubyte YELLOW[] = {255, 255, 0};
const GLubyte BLACK[] = {0, 0, 0};
const GLubyte WHITE[] = {255, 255, 255};

________________________________________________________________________
Question 5 [1]

void fork_server() {
   pid_t pid = fork();
   if (pid == 0) run_server();
   else cout << "child pid = " << pid << endl;
}

________________________________________________________________________
Question 6 [1]

int main (int argc, char** argv) {
   vector<thread> vt;
   for (int i = 1; i < argc; ++i) {
      vt.push_back (thread (hello, argv[i]));
   }
   for (auto& t: vt) t.join();
   return 0;
}

________________________________________________________________________
Question 7 [2]

template <typename Itor>
pair<list<int>,list<int>> split (Itor begin, Itor end) {
   list<int> evens;
   list<int> odds;
   while (begin != end) {
      evens.push_back (*begin++);
      if (begin == end) break;
      odds.push_back (*begin++);
   }
   return make_pair (evens, odds);
}

________________________________________________________________________
Question 8 [2]

class foo {
   foo();
   foo (const foo&);
   foo& operator= (const foo&);
   ~foo();
};


Answers to 2015q1-test3, page 3

________________________________________________________________________
Question 9 [2]

template <typename Iterator>
void print (Iterator begin, Iterator end, const string& str) {
   bool prt = false;
   for (; begin != end; ++begin) {
      if (prt) cout << str;
      cout << *begin;
      prt = true;
   }
}

________________________________________________________________________
Question 10 [2]

template <typename Iterator, typename T>
Iterator find (Iterator begin, Iterator end, const T& item) {
   while (begin != end and not (*begin == item)) ++begin;
   return begin;
}

________________________________________________________________________
Question 11(a). [3]

template <typename T, size_t N>
class fixedarray {
   private:
      T data[N];
   public:
      T& operator[] (size_t i) { return data[i]; }
      const T& operator[] (size_t i) const { return data[i]; }
      iterator begin() { iterator i; i.p = &data[0]; return i; }
      iterator end() { iterator i; i.p = &data[N]; return i; }
};

________________________________________________________________________
Question 11(b). [3]

      class iterator {
         friend class fixedarray<T,N>;
         private:
            T* p;
         public:
            bool operator!= (iterator j) const { return p != j.p; }
            iterator& operator++() { ++p; return *this; }
            T& operator*() { return *p; }
      };


Answers to 2015q1-test3, page 4

 1.    (B) green threads

 2.    (A) bidirectional

 3.    (C) protected:

 4.    (B) (p->class_table->f)(p,x,y)

 5.    (C) list<int> l;

 6.    (D) status >> 8

 7.    (C) heap

 8.    (A) operator()

 9.    (B) link time.

10.    (D) pair<const K,V>

11.    (A) base class, then fields in declaration order

12.    (C) C++11


Answers to 2015q1-test3, page 5

 1.    (A) deadlock

 2.    (D) foo operator-- (foo&, int);

 3.    (A) $ O ( 1 ) $

 4.    (B) 2

 5.    (C) u = reinterpret_cast <uintptr_t> (p);

 6.    (C) pair<const string,int>

 7.    (B) above right

 8.    (A) mutex

 9.    (C) race condition

10.    (D) universal parametric

11.    (D) p + p

12.    (B) 1983

