------------------------------
README
------------------------------
Erik Andersen (Team Captain)
Seongwoo Choi
Yuzhuang Chen
Micheal Cardoza

------------------------------
CMPS 111 - Winter 2017
Darrell Long
Assignment 2 - Scheduling 
Due: Friday, February 17th 2017
------------------------------

------------------------------
Note:
------------------------------
Each member has contributed to work on the kernel and the testing programs. 
By the end of the programming procedure, Erik and Seongwoo pair-programmed 
the final implementations on the team captains computer (Erik) 
and used the other computers as multiple 
testing environments for building and compiling different kernel 
versions.

This project was complicated, which was why we spent a lot of our time working on 
creating a design doc. Later on, we modified and focused heavily on design doc to 
add changes we made as we did the assignment. This way, we were able to implement a 
lottery scheduler.  

------------------------------
Files submitted:
------------------------------
README
Makefile
write_test.c
read_test.c

------------------------------
All Kernel files
------------------------------
sched_ule.c
kern_switch.c
kern_resource.c
kern_thread.c
syscalls.master
runq.h
proc.h

------------------------------
Build and Run Program Instructions:
------------------------------
1. Type 'make' to compile testing programs and to create executable files. 
2. Type './Write_test' to take in the IN file and outputs to OUT file.
3. Type './Read_test' to take in a single IN.
4. Type 'make clean' to remove executable, in, and out files.

------------------------------
Test programs and other files:
------------------------------
README
Makefile
write_test.c
read_test.c
input 
output

--------------------------
Test Instructions:
--------------------------
After building using the 'make' command: 
Type these to see the results
Test 1: ./read_test 10000000 > in
Test 2: ./write_test in out
The first test will print out the contents of the two files 
to standard 'output' and this program will show how much process has been 'gifted' to 
the other thread. 
The second test will print the contents of output text file to standard out 
and then exit with an error message.
